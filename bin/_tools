#!/usr/bin/env bash


# Environment variables
# ==============================================
EASYCKAN_VERSION="v2.6 Beta.1"
V_CKAN_BASE_VERSION="2.6"
V_CKAN_VERSION="2.6.2"
if [ -f /tmp/foo.txt ]; then
    v_password=$(cat /var/lib/ckan/default/postgresql.conf)
fi





# Setup a PostgreSQL database
# ==============================================
function ckan-postgresql {
    # Set variables
    v_docker_postgres_name="ckan-postgres"									# Container name
    v_docker_postgres_path="/var/easyckan/database"							# Host persistent data path
    v_docker_postgres_v="$v_docker_postgres_path:/var/lib/postgresql/data"	# Volume path
    v_docker_postgres_p="5432:5432"											# Port

    if [[ $(docker container ls | grep -i $v_docker_postgres_name) ]]; then
        echo "ckan-postgres was found..."
    else
        # Remove old container if exists
        docker rm -f $v_docker_postgres_name 2> /dev/null

        # Create persistent data dir
        mkdir -p $v_docker_postgres_path

        # Create container as daemon
        docker run --net=easyckan --name $v_docker_postgres_name -v $v_docker_postgres_v \
                    -e POSTGRES_DB="ckan_default" -e POSTGRES_PASSWORD=$v_password \
                    -p $v_docker_postgres_p -d easyckan/ckan-postgres:$V_CKAN_BASE_VERSION
        
        # Wait application start
        sleep 2
    fi
}



# Install Solr
# ==============================================
function ckan-solr {
    # Copy default Solr schema if not exist
    mkdir -p /etc/ckan/default/solr
    if [ ! -f /etc/ckan/default/solr/schema.xml ]; then
        wget -O /etc/ckan/default/solr/schema.xml https://raw.githubusercontent.com/ckan/ckan/release-v$V_CKAN_BASE_VERSION-latest/ckan/config/solr/schema.xml
    fi

    # Set variables
    v_docker_solr_name="ckan-solr"				                                                # Container name
    v_docker_solr_p="8983:8983"					                                                # Port
    v_docker_solr_v="/etc/ckan/default/solr:/usr/lib/ckan/default/src/ckan/ckan/config/solr"	# Volume path

    if [[ $(docker container ls | grep -i $v_docker_solr_name) ]]; then
        echo "ckan-solr was found..."
    else
        # Remove old container if exists
        docker rm -f $v_docker_solr_name 2> /dev/null

        # Create container as daemon
        docker run --net=easyckan --name $v_docker_solr_name -p $v_docker_solr_p \
                   -v $v_docker_solr_v \
                   -d easyckan/ckan-solr:$V_CKAN_BASE_VERSION

        # Wait application start
        sleep 8
    fi
}


# Supervisor
# ==============================================
function ckan-supervisor {
    # Create supervisor config dir if not exist
    mkdir -p /etc/ckan/default/supervisor

    # Set variables
    v_docker_supervisor_name="ckan-supervisor"	                                # Container name
    v_docker_supervisor_v="/etc/ckan/default/supervisor:/etc/supervisor/conf.d"	# Volume path

    if [[ $(docker container ls | grep -i $v_docker_supervisor_name) ]]; then
        echo "ckan-supervisor was found..."
    else
        # Remove old container if exists
        docker rm -f $v_docker_supervisor_name 2> /dev/null

        # Create container as daemon
        docker run --net=easyckan --name $v_docker_supervisor_name \
                   -p 9001:9011 \
                   -v $v_docker_supervisor_v \
                   -d easyckan/ckan-supervisor:$V_CKAN_BASE_VERSION
    fi
}


# Create network if not exist
# ==============================================
function ckan-create-network {
    if [[ $(docker network ls | grep -i easyckan) ]]; then
        echo "EasyCKAN network was found..."
    else
        docker network rm easyckan 2> /dev/null
        docker network create -d bridge easyckan 2> /dev/null
    fi
}



# Other dependences and plugins activated
# ==============================================
function ckan-dependences {
    # Start Supervisor
    ckan-supervisor

    # Plugins
    PLUGINS_DIR="/etc/ckan/easyckan/plugins/"
    mkdir -p $PLUGINS_DIR
    PLUGINS=$(ls $PLUGINS_DIR)
    PLUGINS=($PLUGINS)
    
    for file in $PLUGINS
    do
        file=$PLUGINS_DIR$file
        [ -f "$file" ] && [ -x "$file" ] && "$file" run
    done
}